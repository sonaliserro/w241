coeftest(model, vcov. = model$vcovHC_)
}
########################################################
# Relevel the education and checkup_freq factors
########################################################
d[, education := factor(education,
levels = c('Less than a high school diploma',
'High School degree or equivalent',
'Bachelor’s degree',
'Master’s degree',
'Doctorate',
'Other (please specify)'))]
d[, checkup_freq := factor(checkup_freq,
levels = c('Never',
'Only when necessary',
'Once a year',
'Once in 6 months',
'Once in 3 months'))]
########################################################
# Code for covariate balance
########################################################
# Video Treatment
covariate_video = lm(treatment_video ~ age + ethnicity + gender + education + health_score + checkup_freq + vaccine_belief, data = d)
covariate_video <- get_robust_se(covariate_video)
coeftest_robust(covariate_video)
video_cov_pvalue = anova(lm(treatment_video ~ 1, data = d), covariate_video)$"Pr(>F)"[2]
# Quiz Treatment
covariate_quiz = lm(treatment_quiz ~ age + ethnicity + gender + education + health_score + checkup_freq + vaccine_belief, data = d)
covariate_quiz <- get_robust_se(covariate_quiz)
coeftest_robust(covariate_quiz)
quiz_cov_pvalue = anova(lm(treatment_quiz ~ 1, data = d), covariate_quiz)$"Pr(>F)"[2]
########################################################
# Code to find "good" covariates
########################################################
# Helper method that compiles the formula
get_formula <- function(model, covariate) {
return(as.formula(paste('outcome_nfid',
paste(paste(attr(model$terms, 'term.labels'), collapse = ' + '),
covariate, sep = ' + '),
sep = ' ~ ')))
}
# Method that loops through all covariates and returns the one
# with the most significant p-value, and NA if none found.
get_best_covariate <- function(base_model, covariates) {
stats <- list()
p.value <- 0.05
best_covariate = NA
# Gather stats for each model with the added covariate
for(covariate in covariates) {
enhanced_model <- lm(get_formula(base_model, covariate), data = d)
stats[[covariate]]['p.value'] <- anova(base_model, enhanced_model)[2,6]
}
# Determine the 'best covariate' based on the p-value of the anova test
for(covariate in covariates) {
if(!is.na(stats[[covariate]]['p.value']) & stats[[covariate]]['p.value'] < p.value) {
p.value <- stats[[covariate]]['p.value']
best_covariate <- covariate
}
}
return(best_covariate)
}
# Recursively loops though all covariates and finds the best model
get_best_model <- function(base_model, all_covariates) {
while(length(all_covariates) != 0) {
best_covariate <- get_best_covariate(base_model, all_covariates)
if (is.na(best_covariate)) break
all_covariates <- all_covariates[-which(all_covariates == best_covariate)]
base_model <- lm(get_formula(base_model, best_covariate), data = d)
}
return(base_model)
}
# Find the best model
all_covariates <- c('age', 'gender', 'education', 'ethnicity', 'health_score',
'checkup_freq', 'vaccine_belief', 'insurance')
base_model <- lm(outcome_nfid ~ treatment_video + treatment_quiz, data = d)
best_model <- get_best_model(base_model, all_covariates)
########################################################
# Code for calcuating ATE
########################################################
# Calculate the treatment-specific ATE(s)
treatment <- lm(outcome_nfid ~ treatment_video + treatment_quiz, data = d)
treatment <- get_robust_se(treatment)
coeftest_robust(treatment)
# Calculate the treatment-specific ATE(s), controlling for covariates
# Best covariates found in previous block: vaccine_belief, gender, health_score, and age
treatment_covariates <- lm(outcome_nfid ~ treatment_video + treatment_quiz + vaccine_belief + gender + health_score + age, data = d)
treatment_covariates <- get_robust_se(treatment_covariates)
coeftest_robust(treatment_covariates)
########################################################
# Code for calcuating HTE(s)
########################################################
# Age(Binned). Excluding the age covariate here.
treatment_hte_age <- lm(outcome_nfid ~ treatment_video * factor(age.bin) + treatment_quiz * factor(age.bin) +
vaccine_belief + gender + health_score, data = d)
treatment_hte_age <- get_robust_se(treatment_hte_age)
coeftest_robust(treatment_hte_age)
anova(treatment_covariates, treatment_hte_age)
# Checkup-Frequency (as factor)
# Relevel the checkup frequency as its most interesting to compare once a year to only when necessary.
d[, checkup_freq := factor(checkup_freq, levels = c('Once a year', 'Only when necessary', 'Once in 6 months', 'Once in 3 months', 'Never'))]
treatment_hte_checkup <- lm(outcome_nfid ~ treatment_video * checkup_freq + treatment_quiz * checkup_freq +
vaccine_belief + gender + health_score + age, data = d)
treatment_hte_checkup <- get_robust_se(treatment_hte_checkup)
coeftest_robust(treatment_hte_checkup)
anova(treatment_covariates, treatment_hte_checkup)
# Vaccine Beliefs (linear)
treatment_hte_belief <- lm(outcome_nfid ~ treatment_video * vaccine_belief + treatment_quiz * vaccine_belief +
gender + health_score + age, data = d)
treatment_hte_belief <- get_robust_se(treatment_hte_belief)
coeftest_robust(treatment_hte_belief)
anova(treatment_covariates, treatment_hte_belief)
getwd()
setwd(/Users/alexdessouky/Desktop/MIDS/W241/w241_finalproj/data/analysis)
setwd('/Users/alexdessouky/Desktop/MIDS/W241/w241_finalproj/data/analysis')
d = fread('w241_Final_Project_Analysis.csv')
table_of_means <- lm(rnorm(d[, .N]) ~ age + as.numeric(factor(gender)) + as.numeric(factor(ethnicity)) +
as.numeric(factor(education)) + health_score + as.numeric(factor(insurance)) +
as.numeric(factor(checkup_freq)) + vaccine_belief - 1, data = d)
names(table_of_means$coefficients) <- c('age', 'gender', 'ethnicity', 'education', 'health_score',
'insurance', 'checkup_freq', 'vaccine_belief')
# Calculate sample means
means <- lapply(list('control', 'video', 'quiz'), function(slice) {
unlist(
lapply(d[, .(age, gender = gender == 'Female',
ethnicity = ethnicity != 'White',
education = education == 'High School degree or equivalent',
health_score,
insurance = insurance == 'Yes',
checkup_freq = checkup_freq == 'Once a year',
vaccine_belief)],
function(subset) {
mean(subset[d$treatment_group == slice])
}
))})
# Calculate standard deviations, only for non-factor variables
sd <- lapply(list('control', 'video', 'quiz'), function(slice) {
unlist(
lapply(d[, .(age, gender = gender == 'Female',
ethnicity = ethnicity != 'White',
education = education == 'High School degree or equivalent',
health_score,
insurance = insurance == 'Yes',
checkup_freq = checkup_freq == 'Once a year', vaccine_belief)],
function(subset) {
ifelse(is.numeric(subset[0]), sd(subset[d$treatment_group == slice]), NA)
}
))})
p.values <- unlist(lapply(d[, .(age,
gender = gender == 'Female',
ethnicity = ethnicity != 'White',
education = education == 'High School degree or equivalent',
health_score,
insurance = insurance == 'Yes',
checkup_freq = checkup_freq == 'Once a year',
vaccine_belief)],
function(covariate) {
summary(aov(covariate ~ treatment_group, data = d))[[1]][[5]][1]
}
))
########################################################
# Helper functions for robust standard errors
########################################################
# Helper method to get robust standard errors
get_robust_se <- function(model) {
model$vcovHC_ <- vcovHC(model)
return(model)
}
# Helper method to test coefficients with robust standard errors
coeftest_robust <- function(model)   {
coeftest(model, vcov. = model$vcovHC_)
}
########################################################
# Relevel the education and checkup_freq factors
########################################################
d[, education := factor(education,
levels = c('Less than a high school diploma',
'High School degree or equivalent',
'Bachelor’s degree',
'Master’s degree',
'Doctorate',
'Other (please specify)'))]
d[, checkup_freq := factor(checkup_freq,
levels = c('Never',
'Only when necessary',
'Once a year',
'Once in 6 months',
'Once in 3 months'))]
########################################################
# Code for covariate balance
########################################################
# Video Treatment
covariate_video = lm(treatment_video ~ age + ethnicity + gender + education + health_score + checkup_freq + vaccine_belief, data = d)
covariate_video <- get_robust_se(covariate_video)
coeftest_robust(covariate_video)
video_cov_pvalue = anova(lm(treatment_video ~ 1, data = d), covariate_video)$"Pr(>F)"[2]
# Quiz Treatment
covariate_quiz = lm(treatment_quiz ~ age + ethnicity + gender + education + health_score + checkup_freq + vaccine_belief, data = d)
covariate_quiz <- get_robust_se(covariate_quiz)
coeftest_robust(covariate_quiz)
quiz_cov_pvalue = anova(lm(treatment_quiz ~ 1, data = d), covariate_quiz)$"Pr(>F)"[2]
########################################################
# Code to find "good" covariates
########################################################
# Helper method that compiles the formula
get_formula <- function(model, covariate) {
return(as.formula(paste('outcome_nfid',
paste(paste(attr(model$terms, 'term.labels'), collapse = ' + '),
covariate, sep = ' + '),
sep = ' ~ ')))
}
# Method that loops through all covariates and returns the one
# with the most significant p-value, and NA if none found.
get_best_covariate <- function(base_model, covariates) {
stats <- list()
p.value <- 0.05
best_covariate = NA
# Gather stats for each model with the added covariate
for(covariate in covariates) {
enhanced_model <- lm(get_formula(base_model, covariate), data = d)
stats[[covariate]]['p.value'] <- anova(base_model, enhanced_model)[2,6]
}
# Determine the 'best covariate' based on the p-value of the anova test
for(covariate in covariates) {
if(!is.na(stats[[covariate]]['p.value']) & stats[[covariate]]['p.value'] < p.value) {
p.value <- stats[[covariate]]['p.value']
best_covariate <- covariate
}
}
return(best_covariate)
}
# Recursively loops though all covariates and finds the best model
get_best_model <- function(base_model, all_covariates) {
while(length(all_covariates) != 0) {
best_covariate <- get_best_covariate(base_model, all_covariates)
if (is.na(best_covariate)) break
all_covariates <- all_covariates[-which(all_covariates == best_covariate)]
base_model <- lm(get_formula(base_model, best_covariate), data = d)
}
return(base_model)
}
# Find the best model
all_covariates <- c('age', 'gender', 'education', 'ethnicity', 'health_score',
'checkup_freq', 'vaccine_belief', 'insurance')
base_model <- lm(outcome_nfid ~ treatment_video + treatment_quiz, data = d)
best_model <- get_best_model(base_model, all_covariates)
########################################################
# Code for calcuating ATE
########################################################
# Calculate the treatment-specific ATE(s)
treatment <- lm(outcome_nfid ~ treatment_video + treatment_quiz, data = d)
treatment <- get_robust_se(treatment)
coeftest_robust(treatment)
# Calculate the treatment-specific ATE(s), controlling for covariates
# Best covariates found in previous block: vaccine_belief, gender, health_score, and age
treatment_covariates <- lm(outcome_nfid ~ treatment_video + treatment_quiz + vaccine_belief + gender + health_score + age, data = d)
treatment_covariates <- get_robust_se(treatment_covariates)
coeftest_robust(treatment_covariates)
########################################################
# Code for calcuating HTE(s)
########################################################
# Age(Binned). Excluding the age covariate here.
treatment_hte_age <- lm(outcome_nfid ~ treatment_video * factor(age.bin) + treatment_quiz * factor(age.bin) +
vaccine_belief + gender + health_score, data = d)
treatment_hte_age <- get_robust_se(treatment_hte_age)
coeftest_robust(treatment_hte_age)
anova(treatment_covariates, treatment_hte_age)
# Checkup-Frequency (as factor)
# Relevel the checkup frequency as its most interesting to compare once a year to only when necessary.
d[, checkup_freq := factor(checkup_freq, levels = c('Once a year', 'Only when necessary', 'Once in 6 months', 'Once in 3 months', 'Never'))]
treatment_hte_checkup <- lm(outcome_nfid ~ treatment_video * checkup_freq + treatment_quiz * checkup_freq +
vaccine_belief + gender + health_score + age, data = d)
treatment_hte_checkup <- get_robust_se(treatment_hte_checkup)
coeftest_robust(treatment_hte_checkup)
anova(treatment_covariates, treatment_hte_checkup)
# Vaccine Beliefs (linear)
treatment_hte_belief <- lm(outcome_nfid ~ treatment_video * vaccine_belief + treatment_quiz * vaccine_belief +
gender + health_score + age, data = d)
treatment_hte_belief <- get_robust_se(treatment_hte_belief)
coeftest_robust(treatment_hte_belief)
library(data.table)
library(stargazer)
library(dplyr)
library(sandwich)
library(lmtest)
d <- fread('./data/ps5_no1.csv')
table(d$total_ad_exposures_week1)
table(d$treatment_ad_exposures_week1)
mod1b = lm(week0 ~ treatment_ad_exposures_week1, data = d)
summary(mod1b)
mod1d = lm(week0 ~ I(treatment_ad_exposures_week1 / total_ad_exposures_week1), data = d)
summary(mod1d)
mod1b = lm(week0 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d)
summary(mod1b)
d$control = d$total_ad_exposures_week1 - d$treatment_ad_exposures_week1
mod1b = lm(week0 ~ control, data = d)
summary(mod1b)
rm(list = ls(all.names = TRUE))
getwd()
d = fread('w241_Final_Project_Analysis.csv')
View(d)
d_quiz = d[treatment_quiz == 1,]
cor(d_quiz$quiz_score,d_quiz$age)
cor(d_quiz$quiz_score,d_quiz$age.bin)
d[,mean(quiz_score), by = age.bin]
d_quiz[,mean(quiz_score), by = age.bin]
d_quiz[,mean(quiz_score), by = checkup_freq]
d_quiz[,mean(quiz_score), by = belief.bin]
rm(list = ls(all.names = TRUE))
library(data.table)
library(stargazer)
library(dplyr)
library(sandwich)
library(lmtest)
d <- fread('./data/ps5_no1.csv')
table(d$total_ad_exposures_week1)
table(d$treatment_ad_exposures_week1)
mod1b = lm(week0 ~ treatment_ad_exposures_week1, data = d)
summary(mod1b)
mod1d = lm(week0 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d)
summary(mod1d)
mod1e = lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d)
#robust standard errors
mod1e$vcovHC_ <- vcovHC(mod1e)
ate.1e = coeftest(mod1e, vcov. = mod1e$vcovHC_)[2,1]
se.1e = coeftest(mod1e, vcov. = mod1e$vcovHC_)[2,2]
coeftest(mod1e, vcov. = mod1e$vcovHC_)
summary(mod1e)
#create new variable representing total purchases during and after the campaign
d$total = apply(d[,c(5:14)], 1, sum)
mod1g = lm(total ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d)
#robust standard errors
mod1g$vcovHC_ <- vcovHC(mod1g)
ate.1g = coeftest(mod1g, vcov. = mod1g$vcovHC_)[2,1]
se.1g = coeftest(mod1g, vcov. = mod1g$vcovHC_)[2,2]
coeftest(mod1g, vcov. = mod1g$vcovHC_)
summary(mod1g)
#create new variable representing total purchases during and after the campaign
d$total_2 = apply(d[,c(6:14)], 1, sum)
mod1h = lm(total_2 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d)
#robust standard errors
mod1h$vcovHC_ <- vcovHC(mod1h)
ate.1h = coeftest(mod1h, vcov. = mod1h$vcovHC_)[2,1]
se.1h = coeftest(mod1h, vcov. = mod1h$vcovHC_)[2,2]
coeftest(mod1h, vcov. = mod1h$vcovHC_)
summary(mod1h)
mod1j = lm(week1 ~ treatment_ad_exposures_week1*product_b + total_ad_exposures_week1 + week0, data = d)
#robust standard errors
mod1j$vcovHC_ <- vcovHC(mod1j)
ate.1j = coeftest(mod1j, vcov. = mod1j$vcovHC_)[4,1]
se.1j = coeftest(mod1j, vcov. = mod1j$vcovHC_)[4,2]
coeftest(mod1j, vcov. = mod1j$vcovHC_)
summary(mod1j)
library(data.table)
library(stargazer)
library(dplyr)
library(sandwich)
library(lmtest)
d <- fread('./data/ps5_no1.csv')
table(d$total_ad_exposures_week1)
table(d$treatment_ad_exposures_week1)
mod1b = lm(week0 ~ treatment_ad_exposures_week1, data = d)
#robust standard errors
mod1b$vcovHC_ <- vcovHC(mod1b)
summary(mod1b)
coeftest(mod1b, vcov. = mod1e$vcovHC_)
coeftest(mod1b, vcov. = mod1e$vcovHC_)
coeftest(mod1b, vcov. = mod1b$vcovHC_)
mod1b = lm(week0 ~ treatment_ad_exposures_week1, data = d)
#robust standard errors
mod1b$vcovHC_ <- vcovHC(mod1b)
summary(mod1b)
coeftest(mod1b, vcov. = mod1b$vcovHC_)
mod1d = lm(week0 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d)
#robust standard errors
mod1d$vcovHC_ <- vcovHC(mod1d)
summary(mod1d)
coeftest(mod1d, vcov. = mod1d$vcovHC_)
mod1e = lm(week1 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d)
#robust standard errors
mod1e$vcovHC_ <- vcovHC(mod1e)
ate.1e = coeftest(mod1e, vcov. = mod1e$vcovHC_)[2,1]
se.1e = coeftest(mod1e, vcov. = mod1e$vcovHC_)[2,2]
coeftest(mod1e, vcov. = mod1e$vcovHC_)
summary(mod1e)
View(d)
#create new variable representing total purchases during and after the campaign
d$total_2 = apply(d[,c(6:14)], 1, sum)
mod1h = lm(total_2 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d)
#robust standard errors
mod1h$vcovHC_ <- vcovHC(mod1h)
ate.1h = coeftest(mod1h, vcov. = mod1h$vcovHC_)[2,1]
se.1h = coeftest(mod1h, vcov. = mod1h$vcovHC_)[2,2]
coeftest(mod1h, vcov. = mod1h$vcovHC_)
summary(mod1h)
#create new variable representing total purchases during and after the campaign
d$total_2 = apply(d[,c(6:14)], 1, sum)
mod1h = lm(total_2 ~ treatment_ad_exposures_week1 + factor(total_ad_exposures_week1), data = d)
#robust standard errors
mod1h$vcovHC_ <- vcovHC(mod1h)
ate.1h = coeftest(mod1h, vcov. = mod1h$vcovHC_)[2,1]
se.1h = coeftest(mod1h, vcov. = mod1h$vcovHC_)[2,2]
coeftest(mod1h, vcov. = mod1h$vcovHC_)
summary(mod1h)
#create new variable representing total purchases during and after the campaign
d$total_2 = apply(d[,c(6:14)], 1, sum)
mod1h = lm(total_2 ~ treatment_ad_exposures_week1 + total_ad_exposures_week1, data = d)
#robust standard errors
mod1h$vcovHC_ <- vcovHC(mod1h)
ate.1h = coeftest(mod1h, vcov. = mod1h$vcovHC_)[2,1]
se.1h = coeftest(mod1h, vcov. = mod1h$vcovHC_)[2,2]
coeftest(mod1h, vcov. = mod1h$vcovHC_)
summary(mod1h)
mod1j = lm(week1 ~ treatment_ad_exposures_week1*product_b + total_ad_exposures_week1 + week0, data = d)
#robust standard errors
mod1j$vcovHC_ <- vcovHC(mod1j)
ate.1j = coeftest(mod1j, vcov. = mod1j$vcovHC_)[6,1]
se.1j = coeftest(mod1j, vcov. = mod1j$vcovHC_)[6,2]
coeftest(mod1j, vcov. = mod1j$vcovHC_)
summary(mod1j)
mod1j = lm(week1 ~ treatment_ad_exposures_week1*product_b + total_ad_exposures_week1 , data = d)
#robust standard errors
mod1j$vcovHC_ <- vcovHC(mod1j)
ate.1j = coeftest(mod1j, vcov. = mod1j$vcovHC_)[6,1]
mod1j = lm(week1 ~ treatment_ad_exposures_week1*product_b + total_ad_exposures_week1 , data = d)
#robust standard errors
mod1j$vcovHC_ <- vcovHC(mod1j)
ate.1j = coeftest(mod1j, vcov. = mod1j$vcovHC_)[5,1]
se.1j = coeftest(mod1j, vcov. = mod1j$vcovHC_)[5,2]
coeftest(mod1j, vcov. = mod1j$vcovHC_)
summary(mod1j)
mod1j = lm(week1 ~ treatment_ad_exposures_week1*product_b + total_ad_exposures_week1 + week0, data = d)
#robust standard errors
mod1j$vcovHC_ <- vcovHC(mod1j)
ate.1j = coeftest(mod1j, vcov. = mod1j$vcovHC_)[6,1]
se.1j = coeftest(mod1j, vcov. = mod1j$vcovHC_)[6,2]
coeftest(mod1j, vcov. = mod1j$vcovHC_)
summary(mod1j)
d <- fread("./data/ps5_no2.csv")
mod2a = lm(income ~ years_education, data = d)
#robust standard errors
mod2a$vcovHC_ <- vcovHC(mod2a)
ate.2a = coeftest(mod2a, vcov. = mod2a$vcovHC_)[2,1]
se.2a = coeftest(mod2a, vcov. = mod2a$vcovHC_)[2,2]
coeftest(mod2a, vcov. = mod2a$vcovHC_)
summary(mod2a)
d$high_rank = ifelse(d$draft_number <= 80, 1, 0)
mod2c = lm(years_education ~ high_rank, data = d)
#cluster robust errors
mod2c$vcovCL1 = vcovCL(mod2c, cluster = d[, draft_number])
ate.2c = coeftest(mod2c, mod2c$vcovCL1)[2,1]
se.2c = coeftest(mod2c, mod2c$vcovCL1)[2,2]
coeftest(mod2c, vcov. = mod2c$vcovCL1)
summary(mod2c)
mod2d = lm(income ~ high_rank, data = d)
#cluster robust errors
mod2d$vcovCL1 = vcovCL(mod2d, cluster = d[, draft_number])
ate.2d = coeftest(mod2d, mod2d$vcovCL1)[2,1]
se.2d = coeftest(mod2d, mod2d$vcovCL1)[2,2]
coeftest(mod2d, vcov. = mod2d$vcovCL1)
summary(mod2d)
ate.2e = ate.2d / ate.2c
ate.2e
d$attrition = ifelse(d$income == 0, 1, 0)
mod2g = lm(attrition ~ high_rank, data = d)
#cluster robust errors
m#od2g$vcovCL1 = vcovCL(mod2g, cluster = d[, draft_number])
d$attrition = ifelse(d$income == 0, 1, 0)
mod2g = lm(attrition ~ high_rank, data = d)
#cluster robust errors
#mod2g$vcovCL1 = vcovCL(mod2g, cluster = d[, draft_number])
#ate.2g = coeftest(mod2g, mod2g$vcovCL1)[2,1]
#se.2g = coeftest(mod2g, mod2g$vcovCL1)[2,2]
#coeftest(mod2g, vcov. = mod2d$vcovCL1)
summary(mod2g)
View(d)
d$attrition = ifelse(d$income == 0, 1, 0)
mod2g = lm(attrition ~ high_rank, data = d)
#cluster robust errors
#mod2g$vcovCL1 = vcovCL(mod2g, cluster = d[, draft_number])
#ate.2g = coeftest(mod2g, mod2g$vcovCL1)[2,1]
#se.2g = coeftest(mod2g, mod2g$vcovCL1)[2,2]
#coeftest(mod2g, vcov. = mod2d$vcovCL1)
summary(mod2g)
mod2g$vcovCL1 = vcovCL(mod2g, cluster = d[, draft_number])
ate.2g = coeftest(mod2g, mod2g$vcovCL1)[2,1]
se.2g = coeftest(mod2g, mod2g$vcovCL1)[2,2]
coeftest(mod2g, vcov. = mod2d$vcovCL1)
nrow(d[income == 0,])
d[, .N, by=.(draft_number, high_ranked)][, mean(N), by=high_ranked]
d[, .N, by=.(draft_number, high_rank)][, mean(N), by=high_rank]
d[, .N, by=.(draft_number, high_rank)]
d[, .N, by=.(draft_number, high_rank)][, mean(N), by=high_rank]
d[, .N, by=.(draft_number)][, mean(N), by=high_rank]
d[, .N, by=.(draft_number)][, mean(N), by=high_rank]
d[, .N, by=.(draft_number)]
total_individuals = d[, .N, by=.(draft_number, high_rank)]
t.test(total_individuals[high_rank == 1], total_individuals[high_rank == 0,])
lm(N ~ high_rank, d = total_individuals)
summary(lm(N ~ high_rank, d = total_individuals))
model = lm(N ~ high_rank, d = total_individuals)
model$vcovCL1 = vcovCL(model, cluster = total_individuals[, draft_number])
coeftest(model, vcov. = model$vcovCl1)
#create a datatable showing the number of individuals in each draft number as well as high / low rank designation
total_individuals = d[, .N, by=.(draft_number, high_rank)]
#regress total number of individuals on the high rank indicator
model = lm(N ~ high_rank, d = total_individuals)
#add cluster robust errors
model$vcovCL1 = vcovCL(model, cluster = total_individuals[, draft_number])
#coef test to determine presence of differential attrition
coeftest(model, vcov. = model$vcovCl1)
ate.2g = coeftest(model, vcov. = model$vcovCl1)[2,1]
se.2g = coeftest(model, vcov. = model$vcovCl1)[2,2]
